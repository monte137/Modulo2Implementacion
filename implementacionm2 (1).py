# -*- coding: utf-8 -*-
"""ImplementacionM2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vzx-NNBmVUif6ZcguxnqH6qPwOHY7DLP
"""

from google.colab import drive

drive.mount("/content/gdrive")  
!pwd

"""Se importan los datos a utilizar, y se les asignan nombres a cada una de las columnas. En este caso se utiliza un dataset de caracteristicas de vinos, donde apartir de estas, se clasifican en 3 diferentes clases."""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/gdrive/MyDrive/ConcentracionCienciaDeDatos"
!ls
import pandas as pd
from sklearn import tree
columns= ["Class","Alcohol","Malic acid", "Ash","Alcalinity of ash", "Magnesium","Total phenols",
           "Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue",
           "OD280/OD315 of diluted wines","Proline"]
df= pd.read_csv('wine.data',names= columns)
df.head()

"""Se eliminan las clases OD280... y Proline del conjunto de datos. Y se separan los datos en x, & y, en este caso los valores objetivo o clase. Utilizando la funcion train test split, dividimos el data set en datos de entrenamiento y de test. """

df_x= df.drop(['Class','OD280/OD315 of diluted wines','Proline'],axis=1)
df_y= df['Class']
from sklearn.model_selection import  train_test_split
x_train,x_test,y_train,y_test = train_test_split(df_x,df_y,train_size=.7)

"""Se inicializa el modelo de regresion logistica con iteraciones maximas de 50 , para evitar el overfitting o que el programa corra sin parar. El metodo seleccionado es el Newton-CG, recomendado para problemas multiclase, el cual ademas converge de manera mas rapida que el solver default."""

from sklearn.linear_model import LogisticRegression
model= LogisticRegression(max_iter=50,solver='newton-cg')
model.fit(x_train,y_train)

"""Estos son los puntajes obtenidos para train y para test."""

scoretrain=model.score(x_train,y_train)
scoretest=model.score(x_test,y_test)
print('El score obtenido en los datos de entrenamiento es:',scoretrain,'\n')
print('El score obtenido en los datos de test es:',scoretest)

"""Predicciones"""

#Segmentacion de los datos test
x_test1= x_test.iloc[0:10]
x_test2= x_test.iloc[10:20]
x_test3= x_test.iloc[20:30]
x_test4= x_test.iloc[30:40]
x_test5= x_test.iloc[40:50]

y_test1= y_test.iloc[0:10]
y_test2= y_test.iloc[10:20]
y_test3= y_test.iloc[20:30]
y_test4= y_test.iloc[30:40]
y_test5= y_test.iloc[40:50]
#Predicciones
pred1=model.predict(x_test1)
pred2=model.predict(x_test2)
pred3=model.predict(x_test3)
pred4=model.predict(x_test4)
pred5=model.predict(x_test5)

print(y_test1.values,pred1)
print(y_test2.values,pred2)
print(y_test3.values,pred3)
print(y_test4.values,pred4)
print(y_test5.values,pred5)